

const proof = require('./proof.json')

const ethers = require('ethers')
const snarkjs = require("snarkjs");

// npx snarkjs plonk prove test_final.zkey demo1/output.wtns demo1/proof.json demo1/public.json
const makeProof = async () => {
    const { proof, publicSignals } = await snarkjs.plonk.fullProve(
        {
            "nullifier": "1",
            "secret": "1"
        },
        __dirname + "/../build/test_js/test.wasm", 
        __dirname + "/test_final.zkey"
    );

    console.log("Proof: ");
    console.log(JSON.stringify(proof, null, 1));

    const verificationKey = require('./verification_key.json')
    const res = await snarkjs.plonk.verify(verificationKey, publicSignals, proof);

    if (res === true) {
        console.log("Verification OK");
    } else {
        console.log("Invalid proof");
    }

    return {
        proof,
        publicSignals
    }
};

class ProofUtils {
    static getSolidityArgs(plonkProof: any) {
        let arg_proof: string[] = []
        // let arg_publicSignals = []

        /*
{
  A: [
    '18499355051366918322211027442740921319453327493760597976835934021976016812410',
    '9253421447152750057636133566377729223553213548600200230448006835200280862857',
    '1'
  ],
  B: [
    '10256371499981249108023263988686419143061449221980287023805121595328059815614',
    '19575223291740126068366580803131841323115903961808581076212096838943343080180',
    '1'
  ],
  C: [
    '18310580058993943239283807207580650835669505969891954370136748963629027330608',
    '17152193621706190218810992558987242506409006546760633569179569305868152812470',
    '1'
  ],
        */
        const keys = 'A B C Z T1 T2 T3 Wxi Wxiw'.split(' ')
        keys.map(k => {
            const [a, b] = plonkProof[k];
            // @ts-ignore
            arg_proof.push(a)
            // @ts-ignore
            arg_proof.push(b)
        })

        /*
eval_a: '1110408809307425487982210005317565325662645566856055306218528435490590436901',
eval_b: '451859298191900248511439531852593522508238517523664565904518756471418865383',
eval_c: '13645358852375355605050932165318782199690888813295634581339105696813847177693',
eval_s1: '19903429881500678312829149816765309372418149934078496800425109328708221142272',
eval_s2: '9737038127614171055815198449079756341966171327528500379902956603340346330658',
eval_zw: '16776880014939036829045314645341232763696149112202124689851413037495112130185',
        */

        const keys2 = 'eval_a eval_b eval_c eval_s1 eval_s2 eval_zw'.split(' ')
        keys2.map(k => {
            // @ts-ignore
            arg_proof.push(plonkProof[k])
        })

        return arg_proof
    }
}

const Verify_ABI = require('../out/verifier.sol/PlonkVerifier.json').metadata.output.abi

async function main() {
    const { proof, publicSignals } = await makeProof()
    // const proof = {
    //     "A": [
    //         "17103806382869120822208276281500936837237688774243880945520205280045082544205",
    //         "4997399090411500418649855789743130130360687689509529109533905106481082202744",
    //         "1"
    //     ],
    //     "B": [
    //         "20345509549274777051126408702267665179607184019585945809282575406781016386822",
    //         "3466226548356911394248271870149536266893916486754661446467930729458190858619",
    //         "1"
    //     ],
    //     "C": [
    //         "19320210021870288648060889650041137842249197513903885746090166280766249733662",
    //         "17052734191705478374513836622521707240050538487511945761569792723393696351958",
    //         "1"
    //     ],
    //     "Z": [
    //         "19338147069679914956840902582026554349479712354064245984750760010424458708200",
    //         "13371537032507489215763557318317682675936686593331177384274836153661645045269",
    //         "1"
    //     ],
    //     "T1": [
    //         "9709304337633280376015820920178590025308437151400789031313280316321259995152",
    //         "7544630573822510911153289658507281533488300330847509003527413344602051869897",
    //         "1"
    //     ],
    //     "T2": [
    //         "15628313760908467015377874224413407553474413284142468426257908917431157364088",
    //         "3019893966490049673705081395220120725095811763293266403307943908543344401209",
    //         "1"
    //     ],
    //     "T3": [
    //         "21030250076344106233670035583200842535554376547562936039184268930030864259037",
    //         "1436702916110252039040737377019106462003277210241952948380449179636643344760",
    //         "1"
    //     ],
    //     "Wxi": [
    //         "6615643039431914183131283849809491409415114100679283690285395406697322477255",
    //         "14327410590008636794238765446372186755644875420244869594217098511233444809779",
    //         "1"
    //     ],
    //     "Wxiw": [
    //         "3457524864933638592793165593904026079212480907259036112732258522596992162918",
    //         "12813010337348449493171585357951924082162155820724651371194761227045672457041",
    //         "1"
    //     ],
    //     "eval_a": "9370623941253748358741568085398390167853249032776997877724484550293433428589",
    //     "eval_b": "20197300141081636536064455543520279677646626082431753104078227735547205501310",
    //     "eval_c": "14572746443989906817728808504660855463549764191002554402610820033590762738502",
    //     "eval_s1": "17674288444480921784769502113226536982630012966388065085246389374431993878882",
    //     "eval_s2": "17703303964514834691204582962172943866714230211222669392319461144892346207047",
    //     "eval_zw": "14113387382566075470211150535262189285853716831474602694685263337109449844301",
    //     "protocol": "plonk",
    //     "curve": "bn128"
    // }
    // const publicSignals = [
    //     "20507009857438517540388999660734197799146923375911870232112876661808266217563",
    //     "15188759486016725868344403663296721188374024430739473840722227864599086804552"
    // ]

    const args = ProofUtils.getSolidityArgs(proof)

    const provider = new ethers.providers.JsonRpcProvider()
    const contract = new ethers.Contract(
        "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        Verify_ABI,
        provider
    )

    
    const res = await contract.verifyProof(args, publicSignals)
    console.log(res)
}

main()
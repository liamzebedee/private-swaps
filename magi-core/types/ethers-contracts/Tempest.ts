/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Tempest {
  export type DepositArgsStruct = {
    token: string;
    amount: BigNumberish;
    spendKeyCommitment: BytesLike;
  };

  export type DepositArgsStructOutput = [string, BigNumber, string] & {
    token: string;
    amount: BigNumber;
    spendKeyCommitment: string;
  };

  export type SwapArgsStruct = {
    _proof: BigNumberish[];
    _nullifierHash: BytesLike;
    token: string;
    amount: BigNumberish;
    _root: BytesLike;
    _recipient: string;
    _relayer: string;
    _relayerFeeETH: BigNumberish;
    _refund: BigNumberish;
    tokenA: string;
    amountA: BigNumberish;
    tokenB: string;
    amountB: BigNumberish;
    commitment: BytesLike;
  };

  export type SwapArgsStructOutput = [
    BigNumber[],
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    _proof: BigNumber[];
    _nullifierHash: string;
    token: string;
    amount: BigNumber;
    _root: string;
    _recipient: string;
    _relayer: string;
    _relayerFeeETH: BigNumber;
    _refund: BigNumber;
    tokenA: string;
    amountA: BigNumber;
    tokenB: string;
    amountB: BigNumber;
    commitment: string;
  };

  export type WithdrawArgsStruct = {
    _pA: [BigNumberish, BigNumberish];
    _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    _pC: [BigNumberish, BigNumberish];
    _pubSignals: BigNumberish[];
    nullifierHash: BigNumberish;
    assetId: string;
    assetAmount: BigNumberish;
    root: BytesLike;
    recipient: string;
    relayer: string;
    relayerFeeETH: BigNumberish;
    refund: BigNumberish;
  };

  export type WithdrawArgsStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber],
    BigNumber[],
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    _pA: [BigNumber, BigNumber];
    _pB: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    _pC: [BigNumber, BigNumber];
    _pubSignals: BigNumber[];
    nullifierHash: BigNumber;
    assetId: string;
    assetAmount: BigNumber;
    root: string;
    recipient: string;
    relayer: string;
    relayerFeeETH: BigNumber;
    refund: BigNumber;
  };
}

export interface TempestInterface extends utils.Interface {
  functions: {
    "FIELD_SIZE()": FunctionFragment;
    "ROOT_HISTORY_SIZE()": FunctionFragment;
    "ZERO_VALUE()": FunctionFragment;
    "commitments(uint256)": FunctionFragment;
    "computeCommitment(address,uint256,bytes32)": FunctionFragment;
    "currentRootIndex()": FunctionFragment;
    "deposit((address,uint256,bytes32))": FunctionFragment;
    "depositVerifier()": FunctionFragment;
    "feePool()": FunctionFragment;
    "feeRate()": FunctionFragment;
    "filledSubtrees(uint256)": FunctionFragment;
    "getDependencies()": FunctionFragment;
    "getLastRoot()": FunctionFragment;
    "hashLeftRight(address,bytes32,bytes32)": FunctionFragment;
    "hasher()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAddressCacheFresh()": FunctionFragment;
    "isKnownRoot(bytes32)": FunctionFragment;
    "levels()": FunctionFragment;
    "nextIndex()": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "numCommitments()": FunctionFragment;
    "rebuildAddressCache()": FunctionFragment;
    "roots(uint256)": FunctionFragment;
    "swap((uint256[24],bytes32,address,uint256,bytes32,address,address,uint256,uint256,address,uint256,address,uint256,bytes32))": FunctionFragment;
    "swapVerifier()": FunctionFragment;
    "transfer()": FunctionFragment;
    "withdraw((uint256[2],uint256[2][2],uint256[2],uint256[8],uint256,address,uint256,bytes32,address,address,uint256,uint256))": FunctionFragment;
    "withdrawVerifier()": FunctionFragment;
    "zeros(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FIELD_SIZE"
      | "ROOT_HISTORY_SIZE"
      | "ZERO_VALUE"
      | "commitments"
      | "computeCommitment"
      | "currentRootIndex"
      | "deposit"
      | "depositVerifier"
      | "feePool"
      | "feeRate"
      | "filledSubtrees"
      | "getDependencies"
      | "getLastRoot"
      | "hashLeftRight"
      | "hasher"
      | "initialize"
      | "isAddressCacheFresh"
      | "isKnownRoot"
      | "levels"
      | "nextIndex"
      | "nullifierHashes"
      | "numCommitments"
      | "rebuildAddressCache"
      | "roots"
      | "swap"
      | "swapVerifier"
      | "transfer"
      | "withdraw"
      | "withdrawVerifier"
      | "zeros"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCommitment",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [Tempest.DepositArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressCacheFresh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numCommitments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebuildAddressCache",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [Tempest.SwapArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "transfer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [Tempest.WithdrawArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressCacheFresh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebuildAddressCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;

  events: {
    "CacheUpdated(bytes32,address)": EventFragment;
    "Commitment(uint256,bytes32)": EventFragment;
    "Deposit(address,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Commitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<
  [string, string],
  CacheUpdatedEventObject
>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface CommitmentEventObject {
  totalCommitments: BigNumber;
  commitment: string;
}
export type CommitmentEvent = TypedEvent<
  [BigNumber, string],
  CommitmentEventObject
>;

export type CommitmentEventFilter = TypedEventFilter<CommitmentEvent>;

export interface DepositEventObject {
  token: string;
  amount: BigNumber;
  spendKeyCommitment: string;
  commitment: string;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, string, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface Tempest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TempestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<[number]>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeCommitment(
      token: string,
      amount: BigNumberish,
      spendKeyCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentRootIndex(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      args: Tempest.DepositArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositVerifier(overrides?: CallOverrides): Promise<[string]>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencies(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    getLastRoot(overrides?: CallOverrides): Promise<[string]>;

    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasher(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAddressCacheFresh(overrides?: CallOverrides): Promise<[boolean]>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levels(overrides?: CallOverrides): Promise<[number]>;

    nextIndex(overrides?: CallOverrides): Promise<[number]>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numCommitments(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebuildAddressCache(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    swap(
      args: Tempest.SwapArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapVerifier(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      args: Tempest.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawVerifier(overrides?: CallOverrides): Promise<[string]>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

  ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  commitments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeCommitment(
    token: string,
    amount: BigNumberish,
    spendKeyCommitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  currentRootIndex(overrides?: CallOverrides): Promise<number>;

  deposit(
    args: Tempest.DepositArgsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositVerifier(overrides?: CallOverrides): Promise<string>;

  feePool(overrides?: CallOverrides): Promise<string>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  filledSubtrees(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencies(overrides?: CallOverrides): Promise<string[]>;

  getLastRoot(overrides?: CallOverrides): Promise<string>;

  hashLeftRight(
    _hasher: string,
    _left: BytesLike,
    _right: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hasher(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAddressCacheFresh(overrides?: CallOverrides): Promise<boolean>;

  isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  levels(overrides?: CallOverrides): Promise<number>;

  nextIndex(overrides?: CallOverrides): Promise<number>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  numCommitments(overrides?: CallOverrides): Promise<BigNumber>;

  rebuildAddressCache(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  swap(
    args: Tempest.SwapArgsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapVerifier(overrides?: CallOverrides): Promise<string>;

  transfer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    args: Tempest.WithdrawArgsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawVerifier(overrides?: CallOverrides): Promise<string>;

  zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    commitments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCommitment(
      token: string,
      amount: BigNumberish,
      spendKeyCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    currentRootIndex(overrides?: CallOverrides): Promise<number>;

    deposit(
      args: Tempest.DepositArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    depositVerifier(overrides?: CallOverrides): Promise<string>;

    feePool(overrides?: CallOverrides): Promise<string>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencies(overrides?: CallOverrides): Promise<string[]>;

    getLastRoot(overrides?: CallOverrides): Promise<string>;

    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hasher(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAddressCacheFresh(overrides?: CallOverrides): Promise<boolean>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    levels(overrides?: CallOverrides): Promise<number>;

    nextIndex(overrides?: CallOverrides): Promise<number>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numCommitments(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildAddressCache(overrides?: CallOverrides): Promise<void>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    swap(
      args: Tempest.SwapArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapVerifier(overrides?: CallOverrides): Promise<string>;

    transfer(overrides?: CallOverrides): Promise<void>;

    withdraw(
      args: Tempest.WithdrawArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawVerifier(overrides?: CallOverrides): Promise<string>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CacheUpdated(bytes32,address)"(
      name?: null,
      destination?: null
    ): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    "Commitment(uint256,bytes32)"(
      totalCommitments?: null,
      commitment?: null
    ): CommitmentEventFilter;
    Commitment(
      totalCommitments?: null,
      commitment?: null
    ): CommitmentEventFilter;

    "Deposit(address,uint256,bytes32,bytes32)"(
      token?: string | null,
      amount?: BigNumberish | null,
      spendKeyCommitment?: BytesLike | null,
      commitment?: null
    ): DepositEventFilter;
    Deposit(
      token?: string | null,
      amount?: BigNumberish | null,
      spendKeyCommitment?: BytesLike | null,
      commitment?: null
    ): DepositEventFilter;
  };

  estimateGas: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    commitments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCommitment(
      token: string,
      amount: BigNumberish,
      spendKeyCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRootIndex(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      args: Tempest.DepositArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencies(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasher(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isAddressCacheFresh(overrides?: CallOverrides): Promise<BigNumber>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCommitments(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildAddressCache(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      args: Tempest.SwapArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdraw(
      args: Tempest.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCommitment(
      token: string,
      amount: BigNumberish,
      spendKeyCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      args: Tempest.DepositArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAddressCacheFresh(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCommitments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildAddressCache(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    roots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      args: Tempest.SwapArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      args: Tempest.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeros(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
